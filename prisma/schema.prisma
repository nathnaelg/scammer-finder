generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ScamStatus {
  PENDING
  RESOLVED
  REJECTED
}

model ScamReport {
  id               String    @id @default(uuid())
  scammerUsername  String    @db.VarChar(255)
  platform         String    @db.VarChar(100)
  scamType         String    @db.VarChar(100)
  description      String    @db.Text
  evidence         String?   @db.Text
  reportedBy       String
  status           ScamStatus @default(PENDING)
  riskScore        Int       @default(0)
  communityVotes   Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdBy        String?
  updatedBy        String?
  user             User      @relation(fields: [reportedBy], references: [firebaseUid])
  votes            Vote[]
  
  @@index([scammerUsername])
}

model User {
  id          String          @id @default(uuid())
  username    String          @unique @db.VarChar(50)
  email       String          @unique @db.VarChar(255)
  firebaseUid String          @unique @db.VarChar(255)
  role        Role            @default(USER)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  reports     ScamReport[]
  votes       Vote[]
  notifications Notification[]
  
  @@index([username])
  @@index([email])
}

model Vote {
  id           String     @id @default(uuid())
  userId       String
  reportId     String
  voteType     String     @db.VarChar(50)
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  report       ScamReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@unique([userId, reportId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String   @db.VarChar(500)
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, read])
}
